@model RinkuCinematografica.Models.Empleado


<div class="col">
    <label for="autocomplete" class="form-label"><b>Buscar Empleado</b></label>
    <input id="autocomplete" class="form-control" list="empleados" />
    <label for="bajaLogicaCheckbox" class="form-label"><b>Mostrar baja logica</b></label>
    <input type="checkbox" id="bajaLogicaCheckbox" />
    
    <div id="gridContainer" style="overflow:scroll">
        <table class="table table-striped table-dark">
            <thead>
                <tr>
                    <th>Empleado ID</th>
                    <th>Nombre</th>
                    <th>Apellido paterno</th>
                    <th>Apellido materno</th>
                    <th>Nombre del Rol</th>
                    <th>Baja Logica</th>
                    <th>Editar</th>
                </tr>
            </thead>
            <tbody id="gridBody" class="table-group-divider">
                <!-- Filas del grid se llenarán dinámicamente mediante JavaScript -->
            </tbody>
        </table>
    </div>

</div>


<!-- Modal -->
@using (Html.BeginForm("EdicionEmpleado", "EditarEmpleado", FormMethod.Post))
{
    <div class="modal fade" id="EmpleadoModal" tabindex="-1" aria-labelledby="EmpleadoModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="EmpleadoModalLabel">Modal title</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                
                        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 g-2">
                        <input type="hidden" asp-for="EmpleadoID" id="EmpleadoIDTXTModal" />
                            <div class="col">
                                <label asp-for="Nombre" for="NombreTXT" class="form-label"></label>
                            <input asp-for="Nombre" id="NombreTXT" class="input-text form-control" />
                            </div>

                            <div class="col">
                                <label asp-for="ApellidoP" for="ApellidoPTXT" class="form-label"></label>
                                <input asp-for="ApellidoP" id="ApellidoPTXT" class="input-text form-control" />
                            </div>

                            <div class="col">
                                <label asp-for="AppellidoM" for="AppellidoMTXT" class="form-label"></label>
                                <input asp-for="AppellidoM" id="AppellidoMTXT" class="input-text form-control" />
                            </div>

                            <div class="col">
                                <label asp-for="RollID" for="RollID" class="form-label"></label>
                                @Html.DropDownListFor(model => model.RollID, new SelectList(ViewBag.Roles, "RolID", "NombreRoll"), "Seleccione el rol del empleado", new { @class = "input-numeric form-control" })
                            </div>

                            <div class="col">
                            <label for="bajaLogicaCheckboxModal" class="form-label">Baja logica</label>
                                <input type="checkbox" id="bajaLogicaCheckboxModal" />
                                <input type="hidden" asp-for="BajaLogica" id="BajaLogicaHidden" />
                            </div>
                        </div>

                        <br />

                        
                
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-primary" id="btnGuardar">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        var empleadosIniciales = @Html.Raw(Json.Serialize(Model));
        // Validaciones en tiempo real
        $(document).ready(function () {
            actualizarGridDesdeServidor(empleadosIniciales);
            
            $('.input-numeric').on('input', function () {
                // Permite solo números
                this.value = this.value.replace(/[^0-9]/g, '');
            });

            $('.input-text').on('input', function () {
                // Permite solo letras, espacios, tildes y el símbolo "Ü"
                this.value = this.value.replace(/[^a-zA-Z\sáéíóúÁÉÍÓÚüÜ]/g, '');
            });

            // Manejo del evento de clic en el botón
            $('#btnGuardar').click(function (e) {
                e.preventDefault(); // Evita el envío del formulario por defecto

                // Guardar una referencia al formulario
                var form = $('form');

                // Modificar el valor de BajaLogica antes de enviar el formulario
                var bajaLogicaCheckboxModal = $('#bajaLogicaCheckboxModal');
                var bajaLogicaHidden = $('#BajaLogicaHidden');
                var bajaLogicaValue = bajaLogicaCheckboxModal.is(':checked') ? 1 : 0;

                // Asignar el valor a ambos el checkbox y el campo oculto
                bajaLogicaCheckboxModal.val(bajaLogicaValue);
                bajaLogicaHidden.val(bajaLogicaValue);

                // Envío del formulario a través de AJAX
                $.ajax({
                    url: '@Url.Action("EdicionEmpleado", "EditarEmpleado")',
                    method: 'POST',
                    data: form.serialize(),
                    success: function (data) {
                        // Verificación del resultado y muestra de SweetAlert
                        var isErrorMessage = data.message.startsWith('Error');

                        if (isErrorMessage) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message
                            });
                        } else {
                            Swal.fire({
                                icon: 'success',
                                title: 'Éxito',
                                text: data.message
                            }).then((result) => {
                                // Limpiar los campos del formulario después de cerrar la alerta de éxito
                                if (result.isConfirmed) {
                                    form.trigger('reset');
                                    // Cierra el modal después de resetear el formulario
                                    $('#EmpleadoModal').modal('hide');
                                    actualizarGridDesdeServidor();
                                }
                            });
                        }
                    },
                    error: function () {
                        // Manejo de errores
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Hubo un error al procesar la solicitud.'
                        });
                    }
                });
                actualizarGridDesdeServidor();
            });

            // Handler para el evento de entrada en el input
            $('#autocomplete').on('input', function () {
                actualizarLista();
            });

            // Método para actualizar la lista según el estado del checkbox y el texto de entrada
            function actualizarLista() {
                var term = $('#autocomplete').val().toLowerCase(); // Convertir el término de búsqueda a minúsculas

                // Lógica de filtrado en el lado del cliente
                var rows = $('#gridBody tr');

                rows.hide(); // Ocultar todas las filas inicialmente

                if (term) {
                    // Convertir el contenido de las filas a minúsculas y mostrar solo las filas que coincidan
                    rows.filter(function () {
                        return $(this).text().toLowerCase().indexOf(term) > -1;
                    }).show();
                } else {
                    // Si no hay término, mostrar todas las filas
                    rows.show();
                }
            }


            // Método para actualizar el grid llamando al servidor
            function actualizarGridDesdeServidor() {
                var bajaLogica = $('#bajaLogicaCheckbox').is(':checked') ? 1 : 0;

                // Llama al método en el controlador con los parámetros necesarios
                $.ajax({
                    url: '/EditarEmpleado/BuscarEmpleados',
                    type: 'GET',
                    data: { term: null, bajaLogica: bajaLogica },
                    success: function (data) {
                        // Actualiza el grid con los nuevos datos del servidor
                        actualizarGrid(data);
                    },
                    error: function () {
                        console.error('Error al actualizar la lista de empleados desde el servidor.');
                    }
                });
            }


            // Handler para el cambio de estado del checkbox
            $('#bajaLogicaCheckbox').change(function () {
                actualizarGridDesdeServidor();
            });

            function actualizarGrid(data) {
                var gridContainer = $('#gridContainer');
                var gridBody = $('#gridBody');

                // Limpiar el cuerpo del grid
                gridBody.empty();

                if (data && data.length > 0) {
                    gridContainer.show();

                    for (var i = 0; i < data.length; i++) {
                        var row = $('<tr></tr>');
                        row.append('<td>' + data[i].empleadoID + '</td>');
                        row.append('<td>' + data[i].nombre + '</td>');
                        row.append('<td>' + data[i].apellidoP + '</td>');
                        row.append('<td>' + data[i].appellidoM + '</td>');
                        row.append('<td>' + data[i].nombreRoll + '</td>');
                        row.append('<td>' + data[i].bajaLogica + '</td>');

                        // Añadir un botón a cada fila para abrir el modal
                        var button = $('<button></button>')
                            .addClass('btn btn-primary btn-abrir-modal')
                            .text('Editar')
                            .attr('data-bs-toggle', 'modal')
                            .attr('data-bs-target', '#EmpleadoModal')
                            .attr('data-empleado-id', data[i].empleadoID)
                            .attr('data-nombre', data[i].nombre)
                            .attr('data-apellido-p', data[i].apellidoP)
                            .attr('data-apellido-m', data[i].appellidoM)
                            .attr('data-roll-id', data[i].rollID)
                            .attr('data-baja-logica', data[i].bajaLogica);

                        row.append($('<td></td>').append(button));

                        gridBody.append(row);
                    }

                    // Asignar el evento de clic al botón
                    $('.btn-abrir-modal').on('click', function () {
                        // Obtener los datos del atributo de datos de la fila
                        var empleadoID = $(this).data('empleado-id');
                        var nombre = $(this).data('nombre');
                        var apellidoP = $(this).data('apellido-p');
                        var apellidoM = $(this).data('apellido-m');
                        var rollID = $(this).data('roll-id');
                        var bajaLogica = $(this).data('baja-logica');

                        // Llenar los campos del modal con los datos correspondientes
                        $('#NombreTXT').val(nombre);
                        $('#ApellidoPTXT').val(apellidoP);
                        $('#AppellidoMTXT').val(apellidoM);
                        $('#RollID').val(rollID);

                        // Asignar el valor de empleadoID al input oculto en el modal
                        $('#EmpleadoIDTXTModal').val(empleadoID);

                        // Configurar el checkbox de BajaLogica en el modal
                        if (bajaLogica === 1) {
                            $('#bajaLogicaCheckboxModal').prop('checked', true);
                        } else {
                            $('#bajaLogicaCheckboxModal').prop('checked', false);
                        }

                        // Abre el modal
                        $('#EmpleadoModal').modal('show');
                    });

                } else {
                    gridContainer.hide();
                }
            }


        });
    </script>
}